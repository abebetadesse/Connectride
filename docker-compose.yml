services:
  db:
    image: mariadb:10.11
    container_name: connectride_db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-root}
      MYSQL_DATABASE: ${DB_NAME:-connectride_db}
      MYSQL_USER: ${DB_USER:-connectride}
      MYSQL_PASSWORD: ${DB_PASSWORD:-password}
    volumes:
      - db_data:/var/lib/mysql
    ports:
      - "3306:3306"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  redis:
    image: redis:7-alpine
    container_name: connectride_redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  php:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: connectride_php
    restart: unless-stopped
    ports:
      - "8000:80"
    volumes:
      - ./backend:/var/www/html
    environment:
      DB_HOST: db
      DB_NAME: ${DB_NAME:-connectride_db}
      DB_USER: ${DB_USER:-connectride}
      DB_PASSWORD: ${DB_PASSWORD:-password}
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: connectride_frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      CHOKIDAR_USEPOLLING: true
    stdin_open: true
    tty: true
    depends_on:
      - php

  realtime:
    build:
      context: ./realtime-server
      dockerfile: Dockerfile
    container_name: connectride_realtime
    restart: unless-stopped
    ports:
      - "4000:4000"
    environment:
      REDIS_URL: "redis://:${REDIS_PASSWORD:-redis}@redis:6379"
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "4000"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  db_data:
  redis_data:

networks:
  default:
    driver: bridge